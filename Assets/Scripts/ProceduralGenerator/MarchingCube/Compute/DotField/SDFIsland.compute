// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "../Noise/noise3D.hlsl"
#include "../Includes/Utility.hlsl"
#include "../Includes/SDF.hlsl"

int3 dotFieldSize;
float3 origin;
float cellSize;

float scale;
float isoLevel;
float3 randomOffset;

int islandCount;
StructuredBuffer<float3> islandPositions;

RWStructuredBuffer<float4> outputPoints;
RWStructuredBuffer<int> isConcreteFlagBuffer;
RWStructuredBuffer<int> isAirFlagBuffer;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float value=SDF_MAX;
    for (int i=0;i<islandCount;i++)
    {
        value=min(value,sphereSDF(islandPositions[i], 10, float3(id) * cellSize+origin));
    }
    
    value = SDFNormalize(value);
    
    outputPoints[GetPointIndex(id.x, id.y, id.z, dotFieldSize)] = float4(float3(id) * cellSize, value);
    if(value< isoLevel)
    {
        InterlockedAdd(isConcreteFlagBuffer[0],-1);
    }
    else
    {
        InterlockedAdd(isAirFlagBuffer[0],-1);
    }
}
