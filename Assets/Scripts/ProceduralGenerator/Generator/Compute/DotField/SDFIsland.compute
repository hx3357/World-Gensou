// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define ISLAND_COUNT 10

#include "../Includes/Utility.hlsl"
#include "../Includes/WorldSDF/DuckWorld.hlsl"
#include "../Includes/WorldSDF/DebugWorld.hlsl"
#include "../Includes/Dot.hlsl"
#include "../Includes/SDFOperations.hlsl"
#include "../Includes/SDFEssential.hlsl"
#include "../Includes/Island.hlsl"

int3 dotFieldSize;
float3 origin;
float cellSize;

float scale;
float isoLevel;
float3 randomOffset;

int islandCount;
float4 islandPositions[ISLAND_COUNT];

//Radius, Height
float4 islandParameters[ISLAND_COUNT];

RWStructuredBuffer<Dot> outputPoints;
RWStructuredBuffer<int> isConcreteFlagBuffer;
RWStructuredBuffer<int> isAirFlagBuffer;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= dotFieldSize.x || id.y >= dotFieldSize.y || id.z >= dotFieldSize.z)
        return;
    
    const float3 pos = id * cellSize+origin;
    DotExpl dot = INIT_DOT_EXPL;
    
    for (int i=0;i<islandCount;i++)
    {
        switch (islandPositions[i].w)
        {
        case 0:
            // Normal island
            dot = smooth_colored_union(dot,
                island_basic_shape_sdf(pos,
                    islandPositions[i].xyz,
                    islandPositions[i].xyz,
                    islandParameters[i].x/8,
                    islandParameters[i].y,
                    WHITE*0.5,
                    islandParameters[i].x*0.9),
            10);
            break;
        case 1:
            // Don't islandlize
            dot = smooth_colored_union(dot,
                island_basic_shape_sdf(pos,
                    islandPositions[i].xyz,
                    islandPositions[i].xyz,
                    islandParameters[i].x/8,
                    islandParameters[i].y,
                    WHITE*0.5,
                    islandParameters[i].x*0.9,false,false),
            10);
            break;
        case 2:
            // Lake island
            dot = smooth_colored_union(dot,
                island_basic_shape_sdf(pos,
                    islandPositions[i].xyz,
                    islandPositions[i].xyz,
                    islandParameters[i].x/8,
                    islandParameters[i].y,
                    WHITE*0.5,
                    islandParameters[i].x*0.9,true,true),
            10);
            break;
        default: 
            break;
        }
        
    }
    
    dot.w = sdf_linear_normalize(dot.w, isoLevel);
    outputPoints[get_point_index(id, dotFieldSize)] = convert_dot_expl_to_dot(dot);
    
    if(dot.w < isoLevel)
    {
       isConcreteFlagBuffer[0]++;
    }
    else
    {
        isAirFlagBuffer[0]++;
    }
}
